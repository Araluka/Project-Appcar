# สคริปต์สร้าง Flutter scaffold สำหรับ Windows (PowerShell)
# 1) เปิด PowerShell ในโฟลเดอร์ที่ต้องการ
# 2) วางและรัน script นี้ (ต้องติดตั้ง Flutter แล้ว)
# 3) รัน `flutter pub get` ในโฟลเดอร์ appcar_araluka

$project = "appcar"
if (Test-Path $project) {
  Write-Host "โฟลเดอร์ $project มีอยู่แล้ว — กรุณาลบหรือเปลี่ยนชื่อก่อนรัน" -ForegroundColor Yellow
  exit
}

# สร้างโฟลเดอร์โปรเจค
New-Item -ItemType Directory -Path $project
Set-Location $project

# สร้างโฟลเดอร์ย่อย
$dirs = @(
  "lib",
  "lib/config",
  "lib/services",
  "lib/models",
  "lib/providers",
  "lib/screens",
  "lib/widgets"
)
foreach ($d in $dirs) { New-Item -ItemType Directory -Path $d | Out-Null }

# สร้าง pubspec.yaml
@"
name: appcar_araluka
description: AppCar-Araluka - Flutter client for vehicle booking
publish_to: 'none'
version: 0.0.1

environment:
  sdk: ">=2.18.0 <4.0.0"

dependencies:
  flutter:
    sdk: flutter
  dio: ^5.0.0
  flutter_dotenv: ^5.0.2
  provider: ^6.0.5
  flutter_secure_storage: ^7.0.1
  web_socket_channel: ^2.2.0
  intl: ^0.18.0
  connectivity_plus: ^4.0.0
  cached_network_image: ^3.2.3

dev_dependencies:
  flutter_test:
    sdk: flutter

flutter:
  uses-material-design: true
"@ > pubspec.yaml

# สร้าง .env.example
@"
# คัดลอกเป็น .env แล้วแก้ค่าให้ตรงกับ backend ของคุณ
API_BASE_URL=http://10.0.2.2:8000
WS_URL=ws://10.0.2.2:8000/ws
"@ > .env.example

# สร้าง lib/config/env.dart
@"
import 'package:flutter_dotenv/flutter_dotenv.dart';

class Env {
  static String get apiBaseUrl => dotenv.env['API_BASE_URL'] ?? 'http://10.0.2.2:8000';
  static String get wsUrl => dotenv.env['WS_URL'] ?? 'ws://10.0.2.2:8000/ws';
}
"@ > lib/config/env.dart

# สร้าง lib/services/api_service.dart
@"
import 'dart:async';
import 'package:dio/dio.dart';
import '../config/env.dart';
import '../models/booking.dart';

class ApiService {
  final Dio _dio;

  ApiService()
      : _dio = Dio(BaseOptions(
          baseUrl: Env.apiBaseUrl,
          connectTimeout: const Duration(seconds: 10),
          receiveTimeout: const Duration(seconds: 10),
        ));

  Future<List<Booking>> getBookingsForCustomer(String phone) async {
    final resp = await _dio.get('/bookings', queryParameters: {'phone': phone});
    final data = resp.data as List<dynamic>;
    return data.map((e) => Booking.fromJson(e as Map<String, dynamic>)).toList();
  }

  Future<Booking> createBooking(Map<String, dynamic> payload) async {
    final resp = await _dio.post('/bookings/create', data: payload);
    return Booking.fromJson(resp.data as Map<String, dynamic>);
  }

  Future<Map<String, dynamic>> getQueueStatus({String? vehicleId}) async {
    final resp = await _dio.get('/queue-status', queryParameters: vehicleId != null ? {'vehicle_id': vehicleId} : {});
    return resp.data as Map<String, dynamic>;
  }

  Stream<Map<String, dynamic>> queueStatusStream({String? vehicleId, Duration interval = const Duration(seconds:5)}) async* {
    while (true) {
      try {
        final status = await getQueueStatus(vehicleId: vehicleId);
        yield status;
      } catch (e) {
        // ignore or optionally yield error info
      }
      await Future.delayed(interval);
    }
  }
}
"@ > lib/services/api_service.dart

# สร้าง lib/models/booking.dart
@"
class Booking {
  final String id;
  final String customerName;
  final String phone;
  final String vehicleId;
  final String status;
  final String queueNo;

  Booking({
    required this.id,
    required this.customerName,
    required this.phone,
    required this.vehicleId,
    required this.status,
    required this.queueNo,
  });

  factory Booking.fromJson(Map<String, dynamic> json) {
    return Booking(
      id: json['booking_id']?.toString() ?? json['id']?.toString() ?? '',
      customerName: json['customer_name'] ?? json['name'] ?? '',
      phone: json['phone'] ?? '',
      vehicleId: json['vehicle_id']?.toString() ?? '',
      status: json['status'] ?? '',
      queueNo: json['queue_no']?.toString() ?? '',
    );
  }

  Map<String, dynamic> toJson() => {
        'booking_id': id,
        'customer_name': customerName,
        'phone': phone,
        'vehicle_id': vehicleId,
        'status': status,
        'queue_no': queueNo,
      };
}
"@ > lib/models/booking.dart

# สร้าง lib/providers/booking_provider.dart
@"
import 'package:flutter/material.dart';
import '../models/booking.dart';
import '../services/api_service.dart';

class BookingProvider extends ChangeNotifier {
  final ApiService api;
  List<Booking> _bookings = [];
  bool _loading = false;

  BookingProvider(this.api);

  List<Booking> get bookings => _bookings;
  bool get loading => _loading;

  Future<void> fetchBookings(String phone) async {
    _loading = true; notifyListeners();
    try {
      _bookings = await api.getBookingsForCustomer(phone);
    } finally {
      _loading = false; notifyListeners();
    }
  }

  Future<Booking> createBooking(Map<String, dynamic> payload) async {
    final b = await api.createBooking(payload);
    _bookings.add(b);
    notifyListeners();
    return b;
  }
}
"@ > lib/providers/booking_provider.dart

# สร้าง lib/main.dart
@"
import 'package:flutter/material.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:provider/provider.dart';
import 'config/env.dart';
import 'services/api_service.dart';
import 'providers/booking_provider.dart';
import 'screens/home_screen.dart';

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await dotenv.load(fileName: '.env'); // สร้าง .env ด้วยการคัดลอกจาก .env.example แล้วแก้ค่า
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  final ApiService api = ApiService();

  @override
  Widget build(BuildContext context) {
    return MultiProvider(
      providers: [
        ChangeNotifierProvider(create: (_) => BookingProvider(api)),
      ],
      child: MaterialApp(
        title: 'AppCar-Araluka',
        theme: ThemeData(primarySwatch: Colors.blue),
        home: HomeScreen(),
      ),
    );
  }
}
"@ > lib/main.dart

# สร้าง lib/screens/home_screen.dart
@"
import 'dart:async';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../providers/booking_provider.dart';
import '../services/api_service.dart';

class HomeScreen extends StatefulWidget {
  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  final ApiService _api = ApiService();
  StreamSubscription? _queueSub;
  Map<String, dynamic>? _queueStatus;

  @override
  void initState() {
    super.initState();
    _queueSub = _api.queueStatusStream(interval: const Duration(seconds: 5)).listen((status) {
      setState(() {
        _queueStatus = status;
      });
    });
  }

  @override
  void dispose() {
    _queueSub?.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final provider = Provider.of<BookingProvider>(context);
    return Scaffold(
      appBar: AppBar(title: const Text('AppCar-Araluka')),
      body: Column(
        children: [
          if (_queueStatus != null)
            Padding(
              padding: const EdgeInsets.all(12),
              child: Text('Queue status: ${_queueStatus.toString()}'),
            ),
          ElevatedButton(
            onPressed: () => provider.fetchBookings('0800000000'),
            child: const Text('Load my bookings (example)'),
          ),
          Expanded(
            child: provider.loading
                ? const Center(child: CircularProgressIndicator())
                : ListView.builder(
                    itemCount: provider.bookings.length,
                    itemBuilder: (ctx, i) {
                      final b = provider.bookings[i];
                      return ListTile(
                        title: Text('${b.customerName} - ${b.vehicleId}'),
                        subtitle: Text('Queue: ${b.queueNo} - Status: ${b.status}'),
                      );
                    },
                  ),
          ),
        ],
      ),
    );
  }
}
"@ > lib/screens/home_screen.dart

# สร้าง lib/widgets/booking_card.dart (เล็กๆ)
@"
import 'package:flutter/material.dart';
import '../models/booking.dart';

class BookingCard extends StatelessWidget {
  final Booking booking;
  const BookingCard({required this.booking, super.key});

  @override
  Widget build(BuildContext context) {
    return Card(
      margin: const EdgeInsets.symmetric(vertical:6, horizontal:12),
      child: ListTile(
        title: Text(booking.customerName),
        subtitle: Text('Vehicle: ${booking.vehicleId} • Queue: ${booking.queueNo}'),
        trailing: Text(booking.status),
      ),
    );
  }
}
"@ > lib/widgets/booking_card.dart

Write-Host "สร้างไฟล์เสร็จแล้ว: โปรเจกต์ $project ถูกสร้างใน `$(Get-Location)`" -ForegroundColor Green
Write-Host ""
Write-Host "ขั้นตอนถัดไป (บน Windows):" -ForegroundColor Cyan
Write-Host "1) เปิด terminal อยู่ในโฟลเดอร์ $project" -ForegroundColor White
Write-Host "2) คัดลอก .env.example เป็น .env แล้วแก้ค่า API_BASE_URL ให้ตรงกับ backend ของคุณ" -ForegroundColor White
Write-Host "   (ตัวอย่าง: copy .env.example .env)" -ForegroundColor White
Write-Host "3) รัน: flutter pub get" -ForegroundColor White
Write-Host "4) รันแอป: flutter run (หรือใช้ device/emulator ที่ต้องการ)" -ForegroundColor White


คำแนะนำเพิ่มเติมสำหรับ Windows

ถ้า backend รันบนเครื่องตัวเองและคุณทดสอบด้วย Android emulator ให้ใช้ API_BASE_URL=http://10.0.2.2:8000 (Android emulator -> host machine)

ถ้าต้องการให้เพื่อนทดสอบจากเครื่องอื่น ใช้ ngrok เพื่อ expose local backend แล้วเอา URL ไปใส่ใน .env

ถ้าใช้ HTTP เท่านั้น (ไม่ใช้ HTTPS) บน Android API >= 28 อาจต้องแก้ android/app/src/main/AndroidManifest.xml หรือใช้ network config เพื่ออนุญาต cleartext ใน dev